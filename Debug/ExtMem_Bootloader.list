
ExtMem_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b54  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002dec  08002dec  00012dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e00  08002e00  00012e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08002e04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000070  20000010  08002e14  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00002000  20000080  08002e14  00020080  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f75a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001d56  00000000  00000000  0002f798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007e8  00000000  00000000  000314f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  00031cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000027c0  00000000  00000000  00032408  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000823b  00000000  00000000  00034bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00173972  00000000  00000000  0003ce03  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  001b0775  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001ecc  00000000  00000000  001b07f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002dd4 	.word	0x08002dd4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08002dd4 	.word	0x08002dd4

080002d8 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80002e0:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80002e4:	4b0b      	ldr	r3, [pc, #44]	; (8000314 <SCB_EnableICache+0x3c>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80002ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80002f0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <SCB_EnableICache+0x3c>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a06      	ldr	r2, [pc, #24]	; (8000314 <SCB_EnableICache+0x3c>)
 80002fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002fe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000300:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000304:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000ed00 	.word	0xe000ed00

08000318 <SCB_DisableICache>:
/**
  \brief   Disable I-Cache
  \details Turns off I-Cache
  */
__STATIC_INLINE void SCB_DisableICache (void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800031c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000320:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <SCB_DisableICache+0x34>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	4a08      	ldr	r2, [pc, #32]	; (800034c <SCB_DisableICache+0x34>)
 800032a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800032e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <SCB_DisableICache+0x34>)
 8000332:	2200      	movs	r2, #0
 8000334:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000338:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800033c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000356:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <SCB_EnableDCache+0x7c>)
 8000358:	2200      	movs	r2, #0
 800035a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800035e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <SCB_EnableDCache+0x7c>)
 8000364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000368:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	0b5b      	lsrs	r3, r3, #13
 800036e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000372:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	08db      	lsrs	r3, r3, #3
 8000378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800037c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	015a      	lsls	r2, r3, #5
 8000382:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000386:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000388:	68ba      	ldr	r2, [r7, #8]
 800038a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800038c:	490f      	ldr	r1, [pc, #60]	; (80003cc <SCB_EnableDCache+0x7c>)
 800038e:	4313      	orrs	r3, r2
 8000390:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000394:	68bb      	ldr	r3, [r7, #8]
 8000396:	1e5a      	subs	r2, r3, #1
 8000398:	60ba      	str	r2, [r7, #8]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d1ef      	bne.n	800037e <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	1e5a      	subs	r2, r3, #1
 80003a2:	60fa      	str	r2, [r7, #12]
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d1e5      	bne.n	8000374 <SCB_EnableDCache+0x24>
 80003a8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <SCB_EnableDCache+0x7c>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a06      	ldr	r2, [pc, #24]	; (80003cc <SCB_EnableDCache+0x7c>)
 80003b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003b6:	6153      	str	r3, [r2, #20]
 80003b8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80003bc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 80003c0:	bf00      	nop
 80003c2:	3714      	adds	r7, #20
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	e000ed00 	.word	0xe000ed00

080003d0 <SCB_DisableDCache>:
/**
  \brief   Disable D-Cache
  \details Turns off D-Cache
  */
__STATIC_INLINE void SCB_DisableDCache (void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80003d6:	4b1d      	ldr	r3, [pc, #116]	; (800044c <SCB_DisableDCache+0x7c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003de:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
 80003e2:	4b1a      	ldr	r3, [pc, #104]	; (800044c <SCB_DisableDCache+0x7c>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a19      	ldr	r2, [pc, #100]	; (800044c <SCB_DisableDCache+0x7c>)
 80003e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ec:	6153      	str	r3, [r2, #20]
 80003ee:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003f2:	4b16      	ldr	r3, [pc, #88]	; (800044c <SCB_DisableDCache+0x7c>)
 80003f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f8:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	0b5b      	lsrs	r3, r3, #13
 80003fe:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000402:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	08db      	lsrs	r3, r3, #3
 8000408:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800040c:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	015a      	lsls	r2, r3, #5
 8000412:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000416:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000418:	68ba      	ldr	r2, [r7, #8]
 800041a:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800041c:	490b      	ldr	r1, [pc, #44]	; (800044c <SCB_DisableDCache+0x7c>)
 800041e:	4313      	orrs	r3, r2
 8000420:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	1e5a      	subs	r2, r3, #1
 8000428:	60ba      	str	r2, [r7, #8]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d1ef      	bne.n	800040e <SCB_DisableDCache+0x3e>
    } while(sets-- != 0U);
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	1e5a      	subs	r2, r3, #1
 8000432:	60fa      	str	r2, [r7, #12]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d1e5      	bne.n	8000404 <SCB_DisableDCache+0x34>
 8000438:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800043c:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000440:	bf00      	nop
 8000442:	3714      	adds	r7, #20
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	e000ed00 	.word	0xe000ed00

08000450 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8000456:	f000 f8b9 	bl	80005cc <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 800045a:	f000 fd15 	bl	8000e88 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  /* Configure the Systick to generate an interrupt each 1 msec */
  SystemClock_Config();
 800045e:	f000 f837 	bl	80004d0 <SystemClock_Config>

  /*##-1- Configure Required Memory #########################################*/
  if(Memory_Startup() != MEMORY_OK)
 8000462:	f000 f821 	bl	80004a8 <Memory_Startup>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <main+0x20>
  {
    Error_Handler();
 800046c:	f000 f82d 	bl	80004ca <Error_Handler>
  /* Configure MPU to allow non aligned access */
  MPU_Config();
#endif

  /* Disable CPU L1 cache before jumping to the QSPI code execution */
  CPU_CACHE_Disable();
 8000470:	f000 f8b4 	bl	80005dc <CPU_CACHE_Disable>
  /* Disable Systick interrupt */
  SysTick->CTRL = 0;
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <main+0x4c>)
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]

  /* Initialize user application's Stack Pointer & Jump to user application */
  JumpToApplication = (pFunction) (*(__IO uint32_t*) (APPLICATION_ADDRESS + 4));
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <main+0x50>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	461a      	mov	r2, r3
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <main+0x54>)
 8000482:	601a      	str	r2, [r3, #0]
  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8000484:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f383 8808 	msr	MSP, r3
  JumpToApplication();
 8000492:	4b04      	ldr	r3, [pc, #16]	; (80004a4 <main+0x54>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4798      	blx	r3

  /* We should never get here as execution is now on user application */
  while(1)
 8000498:	e7fe      	b.n	8000498 <main+0x48>
 800049a:	bf00      	nop
 800049c:	e000e010 	.word	0xe000e010
 80004a0:	90000004 	.word	0x90000004
 80004a4:	2000002c 	.word	0x2000002c

080004a8 <Memory_Startup>:
  * @brief  Initialize and configure Volatile and Non-Volatile memory.
  * @param  None
  * @retval None
  */
uint32_t Memory_Startup(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
  uint32_t status = HAL_OK;
 80004ae:	2300      	movs	r3, #0
 80004b0:	607b      	str	r3, [r7, #4]
  status |= SDRAM_Startup();
#endif
  
  /* Non-Volatile Memory Configuration */
#if (CODE_AREA == USE_QSPI) || (BINARY_AREA == USE_SPI_NOR)
  status |= QSPI_Startup(QSPI_MODE);
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 f9d2 	bl	800085c <QSPI_Startup>
 80004b8:	4602      	mov	r2, r0
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4313      	orrs	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
  
  #if (BINARY_AREA == USE_MMC)
  status |= MMC_Startup();
#endif
  
  return status;
 80004c0:	687b      	ldr	r3, [r7, #4]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}

080004ca <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  while(1)
 80004ce:	e7fe      	b.n	80004ce <Error_Handler+0x4>

080004d0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b09e      	sub	sp, #120	; 0x78
 80004d4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

  /*!< Supply configuration update enable */
   HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY); /* PWR set to LDO for the STM32H750B-DISCO board */
 80004dc:	2002      	movs	r0, #2
 80004de:	f001 f839 	bl	8001554 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b37      	ldr	r3, [pc, #220]	; (80005c4 <SystemClock_Config+0xf4>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ea:	4a36      	ldr	r2, [pc, #216]	; (80005c4 <SystemClock_Config+0xf4>)
 80004ec:	f023 0301 	bic.w	r3, r3, #1
 80004f0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004f2:	4b34      	ldr	r3, [pc, #208]	; (80005c4 <SystemClock_Config+0xf4>)
 80004f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <SystemClock_Config+0xf8>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a31      	ldr	r2, [pc, #196]	; (80005c8 <SystemClock_Config+0xf8>)
 8000502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <SystemClock_Config+0xf8>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000514:	bf00      	nop
 8000516:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <SystemClock_Config+0xf8>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800051e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000522:	d1f8      	bne.n	8000516 <SystemClock_Config+0x46>

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000524:	2301      	movs	r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000528:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800052c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800052e:	2300      	movs	r3, #0
 8000530:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000532:	2300      	movs	r3, #0
 8000534:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	2302      	movs	r3, #2
 8000538:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800053a:	2302      	movs	r3, #2
 800053c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800053e:	2305      	movs	r3, #5
 8000540:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000542:	23a0      	movs	r3, #160	; 0xa0
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000546:	2300      	movs	r3, #0
 8000548:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800054a:	2302      	movs	r3, #2
 800054c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800054e:	2302      	movs	r3, #2
 8000550:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000552:	2304      	movs	r3, #4
 8000554:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000556:	2300      	movs	r3, #0
 8000558:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800055a:	2308      	movs	r3, #8
 800055c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800055e:	f107 0308 	add.w	r3, r7, #8
 8000562:	4618      	mov	r0, r3
 8000564:	f001 fd0a 	bl	8001f7c <HAL_RCC_OscConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800056e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000576:	f7ff ffa8 	bl	80004ca <Error_Handler>
  }

  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800057a:	233f      	movs	r3, #63	; 0x3f
 800057c:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2303      	movs	r3, #3
 8000580:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000586:	2308      	movs	r3, #8
 8000588:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800058a:	2340      	movs	r3, #64	; 0x40
 800058c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800058e:	2340      	movs	r3, #64	; 0x40
 8000590:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000596:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000598:	2340      	movs	r3, #64	; 0x40
 800059a:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800059c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005a0:	2104      	movs	r1, #4
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 f8ca 	bl	800273c <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80005ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xea>
  {
    Error_Handler();
 80005b6:	f7ff ff88 	bl	80004ca <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3778      	adds	r7, #120	; 0x78
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	58000400 	.word	0x58000400
 80005c8:	58024800 	.word	0x58024800

080005cc <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* Enable I-Cache */
  SCB_EnableICache();
 80005d0:	f7ff fe82 	bl	80002d8 <SCB_EnableICache>

  /* Enable D-Cache */
  SCB_EnableDCache();
 80005d4:	f7ff febc 	bl	8000350 <SCB_EnableDCache>
}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}

080005dc <CPU_CACHE_Disable>:
  * @brief  CPU L1-Cache disable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Disable(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* Disable I-Cache */
  SCB_DisableICache();
 80005e0:	f7ff fe9a 	bl	8000318 <SCB_DisableICache>

  /* Disable D-Cache */
  SCB_DisableDCache();
 80005e4:	f7ff fef4 	bl	80003d0 <SCB_DisableDCache>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}

080005ec <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
void QSPI_MspInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b090      	sub	sp, #64	; 0x40
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 80005f2:	4b95      	ldr	r3, [pc, #596]	; (8000848 <QSPI_MspInit+0x25c>)
 80005f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80005f8:	4a93      	ldr	r2, [pc, #588]	; (8000848 <QSPI_MspInit+0x25c>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000602:	4b91      	ldr	r3, [pc, #580]	; (8000848 <QSPI_MspInit+0x25c>)
 8000604:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800060c:	62bb      	str	r3, [r7, #40]	; 0x28
 800060e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 8000610:	4b8d      	ldr	r3, [pc, #564]	; (8000848 <QSPI_MspInit+0x25c>)
 8000612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000614:	4a8c      	ldr	r2, [pc, #560]	; (8000848 <QSPI_MspInit+0x25c>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800061c:	4b8a      	ldr	r3, [pc, #552]	; (8000848 <QSPI_MspInit+0x25c>)
 800061e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000620:	4a89      	ldr	r2, [pc, #548]	; (8000848 <QSPI_MspInit+0x25c>)
 8000622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000626:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 8000628:	4b87      	ldr	r3, [pc, #540]	; (8000848 <QSPI_MspInit+0x25c>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062e:	4a86      	ldr	r2, [pc, #536]	; (8000848 <QSPI_MspInit+0x25c>)
 8000630:	f043 0320 	orr.w	r3, r3, #32
 8000634:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000638:	4b83      	ldr	r3, [pc, #524]	; (8000848 <QSPI_MspInit+0x25c>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063e:	f003 0320 	and.w	r3, r3, #32
 8000642:	627b      	str	r3, [r7, #36]	; 0x24
 8000644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8000646:	4b80      	ldr	r3, [pc, #512]	; (8000848 <QSPI_MspInit+0x25c>)
 8000648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064c:	4a7e      	ldr	r2, [pc, #504]	; (8000848 <QSPI_MspInit+0x25c>)
 800064e:	f043 0308 	orr.w	r3, r3, #8
 8000652:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000656:	4b7c      	ldr	r3, [pc, #496]	; (8000848 <QSPI_MspInit+0x25c>)
 8000658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065c:	f003 0308 	and.w	r3, r3, #8
 8000660:	623b      	str	r3, [r7, #32]
 8000662:	6a3b      	ldr	r3, [r7, #32]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8000664:	4b78      	ldr	r3, [pc, #480]	; (8000848 <QSPI_MspInit+0x25c>)
 8000666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800066a:	4a77      	ldr	r2, [pc, #476]	; (8000848 <QSPI_MspInit+0x25c>)
 800066c:	f043 0320 	orr.w	r3, r3, #32
 8000670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000674:	4b74      	ldr	r3, [pc, #464]	; (8000848 <QSPI_MspInit+0x25c>)
 8000676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	61fb      	str	r3, [r7, #28]
 8000680:	69fb      	ldr	r3, [r7, #28]
/*#if (CODE_AREA == USE_QSPI)  */
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8000682:	4b71      	ldr	r3, [pc, #452]	; (8000848 <QSPI_MspInit+0x25c>)
 8000684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000688:	4a6f      	ldr	r2, [pc, #444]	; (8000848 <QSPI_MspInit+0x25c>)
 800068a:	f043 0320 	orr.w	r3, r3, #32
 800068e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000692:	4b6d      	ldr	r3, [pc, #436]	; (8000848 <QSPI_MspInit+0x25c>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	f003 0320 	and.w	r3, r3, #32
 800069c:	61bb      	str	r3, [r7, #24]
 800069e:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80006a0:	4b69      	ldr	r3, [pc, #420]	; (8000848 <QSPI_MspInit+0x25c>)
 80006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a6:	4a68      	ldr	r2, [pc, #416]	; (8000848 <QSPI_MspInit+0x25c>)
 80006a8:	f043 0320 	orr.w	r3, r3, #32
 80006ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b0:	4b65      	ldr	r3, [pc, #404]	; (8000848 <QSPI_MspInit+0x25c>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	f003 0320 	and.w	r3, r3, #32
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
/*#endif*/
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80006be:	4b62      	ldr	r3, [pc, #392]	; (8000848 <QSPI_MspInit+0x25c>)
 80006c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c4:	4a60      	ldr	r2, [pc, #384]	; (8000848 <QSPI_MspInit+0x25c>)
 80006c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ce:	4b5e      	ldr	r3, [pc, #376]	; (8000848 <QSPI_MspInit+0x25c>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80006dc:	4b5a      	ldr	r3, [pc, #360]	; (8000848 <QSPI_MspInit+0x25c>)
 80006de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e2:	4a59      	ldr	r2, [pc, #356]	; (8000848 <QSPI_MspInit+0x25c>)
 80006e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ec:	4b56      	ldr	r3, [pc, #344]	; (8000848 <QSPI_MspInit+0x25c>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80006fa:	4b53      	ldr	r3, [pc, #332]	; (8000848 <QSPI_MspInit+0x25c>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000700:	4a51      	ldr	r2, [pc, #324]	; (8000848 <QSPI_MspInit+0x25c>)
 8000702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800070a:	4b4f      	ldr	r3, [pc, #316]	; (8000848 <QSPI_MspInit+0x25c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
/*#if (CODE_AREA == USE_QSPI)*/
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8000718:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <QSPI_MspInit+0x25c>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071e:	4a4a      	ldr	r2, [pc, #296]	; (8000848 <QSPI_MspInit+0x25c>)
 8000720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000728:	4b47      	ldr	r3, [pc, #284]	; (8000848 <QSPI_MspInit+0x25c>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8000736:	4b44      	ldr	r3, [pc, #272]	; (8000848 <QSPI_MspInit+0x25c>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a42      	ldr	r2, [pc, #264]	; (8000848 <QSPI_MspInit+0x25c>)
 800073e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b40      	ldr	r3, [pc, #256]	; (8000848 <QSPI_MspInit+0x25c>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*#endif*/
  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8000754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000758:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8000766:	2309      	movs	r3, #9
 8000768:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800076a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076e:	4619      	mov	r1, r3
 8000770:	4836      	ldr	r0, [pc, #216]	; (800084c <QSPI_MspInit+0x260>)
 8000772:	f000 fd3f 	bl	80011f4 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8000776:	2340      	movs	r3, #64	; 0x40
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800077a:	2301      	movs	r3, #1
 800077c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800077e:	230a      	movs	r3, #10
 8000780:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8000782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000786:	4619      	mov	r1, r3
 8000788:	4831      	ldr	r0, [pc, #196]	; (8000850 <QSPI_MspInit+0x264>)
 800078a:	f000 fd33 	bl	80011f4 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800078e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8000798:	2309      	movs	r3, #9
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800079c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007a0:	4619      	mov	r1, r3
 80007a2:	482c      	ldr	r0, [pc, #176]	; (8000854 <QSPI_MspInit+0x268>)
 80007a4:	f000 fd26 	bl	80011f4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 80007a8:	2304      	movs	r3, #4
 80007aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80007ac:	2309      	movs	r3, #9
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	4828      	ldr	r0, [pc, #160]	; (8000858 <QSPI_MspInit+0x26c>)
 80007b8:	f000 fd1c 	bl	80011f4 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80007bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80007c2:	230a      	movs	r3, #10
 80007c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80007c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ca:	4619      	mov	r1, r3
 80007cc:	481f      	ldr	r0, [pc, #124]	; (800084c <QSPI_MspInit+0x260>)
 80007ce:	f000 fd11 	bl	80011f4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80007d2:	2308      	movs	r3, #8
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80007d6:	2309      	movs	r3, #9
 80007d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80007da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007de:	4619      	mov	r1, r3
 80007e0:	481d      	ldr	r0, [pc, #116]	; (8000858 <QSPI_MspInit+0x26c>)
 80007e2:	f000 fd07 	bl	80011f4 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80007ea:	2309      	movs	r3, #9
 80007ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80007ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f2:	4619      	mov	r1, r3
 80007f4:	4815      	ldr	r0, [pc, #84]	; (800084c <QSPI_MspInit+0x260>)
 80007f6:	f000 fcfd 	bl	80011f4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80007fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8000800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000804:	4619      	mov	r1, r3
 8000806:	4812      	ldr	r0, [pc, #72]	; (8000850 <QSPI_MspInit+0x264>)
 8000808:	f000 fcf4 	bl	80011f4 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800080c:	2340      	movs	r3, #64	; 0x40
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8000810:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000814:	4619      	mov	r1, r3
 8000816:	480d      	ldr	r0, [pc, #52]	; (800084c <QSPI_MspInit+0x260>)
 8000818:	f000 fcec 	bl	80011f4 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800081c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8000822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000826:	4619      	mov	r1, r3
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <QSPI_MspInit+0x264>)
 800082a:	f000 fce3 	bl	80011f4 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	210f      	movs	r1, #15
 8000832:	205c      	movs	r0, #92	; 0x5c
 8000834:	f000 fca9 	bl	800118a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8000838:	205c      	movs	r0, #92	; 0x5c
 800083a:	f000 fcc0 	bl	80011be <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3740      	adds	r7, #64	; 0x40
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	58024400 	.word	0x58024400
 800084c:	58021400 	.word	0x58021400
 8000850:	58021800 	.word	0x58021800
 8000854:	58020c00 	.word	0x58020c00
 8000858:	58021c00 	.word	0x58021c00

0800085c <QSPI_Startup>:
/**
  * @brief  Initializes and configure the QSPI interface.
  * @retval QSPI memory status
  */
uint32_t QSPI_Startup(uint32_t Mode)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  QSPIHandle.Instance = QUADSPI;
 8000864:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <QSPI_Startup+0xc8>)
 8000866:	4a30      	ldr	r2, [pc, #192]	; (8000928 <QSPI_Startup+0xcc>)
 8000868:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_QSPI_DeInit(&QSPIHandle) != HAL_OK)
 800086a:	482e      	ldr	r0, [pc, #184]	; (8000924 <QSPI_Startup+0xc8>)
 800086c:	f000 ff20 	bl	80016b0 <HAL_QSPI_DeInit>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <QSPI_Startup+0x1e>
  {
    return MEMORY_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e04f      	b.n	800091a <QSPI_Startup+0xbe>
  }

  /* System level initialization */
  QSPI_MspInit();
 800087a:	f7ff feb7 	bl	80005ec <QSPI_MspInit>

  /* QSPI initialization */
  /* ClockPrescaler set to 1, so QSPI clock = 200MHz / (1+3) = 50MHz */
  QSPIHandle.Init.ClockPrescaler     = 3;
 800087e:	4b29      	ldr	r3, [pc, #164]	; (8000924 <QSPI_Startup+0xc8>)
 8000880:	2203      	movs	r2, #3
 8000882:	605a      	str	r2, [r3, #4]
  QSPIHandle.Init.FifoThreshold      = 1;
 8000884:	4b27      	ldr	r3, [pc, #156]	; (8000924 <QSPI_Startup+0xc8>)
 8000886:	2201      	movs	r2, #1
 8000888:	609a      	str	r2, [r3, #8]
  QSPIHandle.Init.SampleShifting     = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <QSPI_Startup+0xc8>)
 800088c:	2210      	movs	r2, #16
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000894:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	fa93 f3a3 	rbit	r3, r3
 800089c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800089e:	68bb      	ldr	r3, [r7, #8]
  QSPIHandle.Init.FlashSize          = POSITION_VAL(MT25TL01G_FLASH_SIZE) - 1;
 80008a0:	fab3 f383 	clz	r3, r3
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	3b01      	subs	r3, #1
 80008a8:	461a      	mov	r2, r3
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <QSPI_Startup+0xc8>)
 80008ac:	611a      	str	r2, [r3, #16]
  QSPIHandle.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <QSPI_Startup+0xc8>)
 80008b0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008b4:	615a      	str	r2, [r3, #20]
  QSPIHandle.Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <QSPI_Startup+0xc8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	619a      	str	r2, [r3, #24]
  QSPIHandle.Init.FlashID            = QSPI_FLASH_ID_1;
 80008bc:	4b19      	ldr	r3, [pc, #100]	; (8000924 <QSPI_Startup+0xc8>)
 80008be:	2200      	movs	r2, #0
 80008c0:	61da      	str	r2, [r3, #28]
  QSPIHandle.Init.DualFlash          = QSPI_DUALFLASH_ENABLE;
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <QSPI_Startup+0xc8>)
 80008c4:	2240      	movs	r2, #64	; 0x40
 80008c6:	621a      	str	r2, [r3, #32]

 if (HAL_QSPI_Init(&QSPIHandle) != HAL_OK)
 80008c8:	4816      	ldr	r0, [pc, #88]	; (8000924 <QSPI_Startup+0xc8>)
 80008ca:	f000 fe7d 	bl	80015c8 <HAL_QSPI_Init>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <QSPI_Startup+0x7c>
  {
    return MEMORY_ERROR;
 80008d4:	2301      	movs	r3, #1
 80008d6:	e020      	b.n	800091a <QSPI_Startup+0xbe>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&QSPIHandle) != MEMORY_OK)
 80008d8:	4812      	ldr	r0, [pc, #72]	; (8000924 <QSPI_Startup+0xc8>)
 80008da:	f000 f85d 	bl	8000998 <QSPI_ResetMemory>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <QSPI_Startup+0x8c>
  {
    return MEMORY_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e018      	b.n	800091a <QSPI_Startup+0xbe>
  }
 
  /* Set the QSPI memory in 4-bytes address mode */
  if (QSPI_EnterFourBytesAddress(&QSPIHandle) != MEMORY_OK)
 80008e8:	480e      	ldr	r0, [pc, #56]	; (8000924 <QSPI_Startup+0xc8>)
 80008ea:	f000 f8c0 	bl	8000a6e <QSPI_EnterFourBytesAddress>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <QSPI_Startup+0x9c>
  {
    return MEMORY_ERROR;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e010      	b.n	800091a <QSPI_Startup+0xbe>
  }

  /* Configuration of the dummy cycles on QSPI memory side */
  if (QSPI_DummyCyclesCfg(&QSPIHandle) != MEMORY_OK)
 80008f8:	480a      	ldr	r0, [pc, #40]	; (8000924 <QSPI_Startup+0xc8>)
 80008fa:	f000 f8f3 	bl	8000ae4 <QSPI_DummyCyclesCfg>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <QSPI_Startup+0xac>
  {
    return MEMORY_ERROR;
 8000904:	2301      	movs	r3, #1
 8000906:	e008      	b.n	800091a <QSPI_Startup+0xbe>
  }
 
#if (CODE_AREA == USE_QSPI)
  /* Enable MemoryMapped mode */
  if( QSPI_EnableMemoryMappedMode(&QSPIHandle) != MEMORY_OK )
 8000908:	4806      	ldr	r0, [pc, #24]	; (8000924 <QSPI_Startup+0xc8>)
 800090a:	f000 f80f 	bl	800092c <QSPI_EnableMemoryMappedMode>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <QSPI_Startup+0xbc>
  {
    return MEMORY_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	e000      	b.n	800091a <QSPI_Startup+0xbe>
  if (QSPI_Shutdown() != MEMORY_OK)
  {
    return MEMORY_ERROR;
  }
#endif /* (CODE_AREA == USE_QSPI) */
  return MEMORY_OK;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000030 	.word	0x20000030
 8000928:	52005000 	.word	0x52005000

0800092c <QSPI_EnableMemoryMappedMode>:
/**
  * @brief  Configure the QSPI in memory-mapped mode
  * @retval QSPI memory status
  */
static uint32_t QSPI_EnableMemoryMappedMode(QSPI_HandleTypeDef *hqspi)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b092      	sub	sp, #72	; 0x48
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;

  /* Configure the command for the read instruction */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000934:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD; /* DTR QUAD INPUT/OUTPUT FAST READ and 4-BYTE DTR FAST READ commands */
 800093a:	23ed      	movs	r3, #237	; 0xed
 800093c:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800093e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000942:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8000944:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000948:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800094a:	2300      	movs	r3, #0
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800094e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000952:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR - 1;
 8000954:	2305      	movs	r3, #5
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8000958:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800095c:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800095e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000962:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000964:	2300      	movs	r3, #0
 8000966:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(&QSPIHandle, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8000970:	f107 0208 	add.w	r2, r7, #8
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	4619      	mov	r1, r3
 800097a:	4806      	ldr	r0, [pc, #24]	; (8000994 <QSPI_EnableMemoryMappedMode+0x68>)
 800097c:	f001 f8d0 	bl	8001b20 <HAL_QSPI_MemoryMapped>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <QSPI_EnableMemoryMappedMode+0x5e>
  {
    return MEMORY_ERROR;
 8000986:	2301      	movs	r3, #1
 8000988:	e000      	b.n	800098c <QSPI_EnableMemoryMappedMode+0x60>
  }

  return MEMORY_OK;
 800098a:	2300      	movs	r3, #0
}
 800098c:	4618      	mov	r0, r3
 800098e:	3748      	adds	r7, #72	; 0x48
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000030 	.word	0x20000030

08000998 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_ResetMemory(QSPI_HandleTypeDef *hqspi)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b090      	sub	sp, #64	; 0x40
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80009a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80009a6:	2366      	movs	r3, #102	; 0x66
 80009a8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80009be:	2300      	movs	r3, #0
 80009c0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80009c2:	2300      	movs	r3, #0
 80009c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80009ce:	4619      	mov	r1, r3
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 fea1 	bl	8001718 <HAL_QSPI_Command>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <QSPI_ResetMemory+0x48>
  {
    return MEMORY_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e042      	b.n	8000a66 <QSPI_ResetMemory+0xce>
  }

  /* Send the reset memory command */
  s_command.Instruction = MT25TL01G_RESET_MEMORY_CMD;
 80009e0:	2399      	movs	r3, #153	; 0x99
 80009e2:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009ec:	4619      	mov	r1, r3
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f000 fe92 	bl	8001718 <HAL_QSPI_Command>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <QSPI_ResetMemory+0x66>
  {
    return MEMORY_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e033      	b.n	8000a66 <QSPI_ResetMemory+0xce>
  }

  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80009fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a02:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8000a04:	2366      	movs	r3, #102	; 0x66
 8000a06:	60bb      	str	r3, [r7, #8]
  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a10:	4619      	mov	r1, r3
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f000 fe80 	bl	8001718 <HAL_QSPI_Command>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <QSPI_ResetMemory+0x8a>
  {
    return MEMORY_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e021      	b.n	8000a66 <QSPI_ResetMemory+0xce>
  }

  /* Send the reset memory command */
  s_command.Instruction = MT25TL01G_RESET_MEMORY_CMD;
 8000a22:	2399      	movs	r3, #153	; 0x99
 8000a24:	60bb      	str	r3, [r7, #8]
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a26:	f107 0308 	add.w	r3, r7, #8
 8000a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a2e:	4619      	mov	r1, r3
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fe71 	bl	8001718 <HAL_QSPI_Command>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <QSPI_ResetMemory+0xa8>
  {
    return MEMORY_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e012      	b.n	8000a66 <QSPI_ResetMemory+0xce>
  }

  /* Enter QSPI memory in QPI mode */
  if(QSPI_EnterQPI(hqspi) != MEMORY_OK)
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f93d 	bl	8000cc0 <QSPI_EnterQPI>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <QSPI_ResetMemory+0xb8>
  {
    return MEMORY_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e00a      	b.n	8000a66 <QSPI_ResetMemory+0xce>
  }  

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != MEMORY_OK)
 8000a50:	f241 3188 	movw	r1, #5000	; 0x1388
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f000 f8fa 	bl	8000c4e <QSPI_AutoPollingMemReady>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <QSPI_ResetMemory+0xcc>
  {
    return MEMORY_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <QSPI_ResetMemory+0xce>
  }

  return MEMORY_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3740      	adds	r7, #64	; 0x40
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <QSPI_EnterFourBytesAddress>:
  * @brief  This function set the QSPI memory in 4-byte address mode
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_EnterFourBytesAddress(QSPI_HandleTypeDef *hqspi)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b090      	sub	sp, #64	; 0x40
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000a76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a7a:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8000a7c:	23b7      	movs	r3, #183	; 0xb7
 8000a7e:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a94:	2300      	movs	r3, #0
 8000a96:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != MEMORY_OK)
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f000 f88b 	bl	8000bb8 <QSPI_WriteEnable>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <QSPI_EnterFourBytesAddress+0x3e>
  {
    return MEMORY_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e017      	b.n	8000adc <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Send the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != MEMORY_OK)
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	6878      	ldr	r0, [r7, #4]
 8000ab8:	f000 fe2e 	bl	8001718 <HAL_QSPI_Command>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <QSPI_EnterFourBytesAddress+0x58>
  {
    return MEMORY_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00a      	b.n	8000adc <QSPI_EnterFourBytesAddress+0x6e>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  if (QSPI_AutoPollingMemReady(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != MEMORY_OK)
 8000ac6:	f241 3188 	movw	r1, #5000	; 0x1388
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f8bf 	bl	8000c4e <QSPI_AutoPollingMemReady>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <QSPI_EnterFourBytesAddress+0x6c>
  {
    return MEMORY_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e000      	b.n	8000adc <QSPI_EnterFourBytesAddress+0x6e>
  }

  return MEMORY_OK;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3740      	adds	r7, #64	; 0x40
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <QSPI_DummyCyclesCfg>:
  * @brief  This function configure the dummy cycles on memory side.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_DummyCyclesCfg(QSPI_HandleTypeDef *hqspi)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b092      	sub	sp, #72	; 0x48
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	81fb      	strh	r3, [r7, #14]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000af0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af4:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8000af6:	2385      	movs	r3, #133	; 0x85
 8000af8:	613b      	str	r3, [r7, #16]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000b02:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000b06:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DummyCycles       = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.NbData            = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b14:	2300      	movs	r3, #0
 8000b16:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b1c:	f107 0310 	add.w	r3, r7, #16
 8000b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b24:	4619      	mov	r1, r3
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 fdf6 	bl	8001718 <HAL_QSPI_Command>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <QSPI_DummyCyclesCfg+0x52>
  {
    return MEMORY_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e03a      	b.n	8000bac <QSPI_DummyCyclesCfg+0xc8>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b36:	f107 030e 	add.w	r3, r7, #14
 8000b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b3e:	4619      	mov	r1, r3
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 fed9 	bl	80018f8 <HAL_QSPI_Receive>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <QSPI_DummyCyclesCfg+0x6c>
  {
    return MEMORY_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e02d      	b.n	8000bac <QSPI_DummyCyclesCfg+0xc8>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hqspi) != MEMORY_OK)
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f000 f831 	bl	8000bb8 <QSPI_WriteEnable>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <QSPI_DummyCyclesCfg+0x7c>
  {
    return MEMORY_ERROR;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e025      	b.n	8000bac <QSPI_DummyCyclesCfg+0xc8>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8000b60:	2381      	movs	r3, #129	; 0x81
 8000b62:	613b      	str	r3, [r7, #16]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8000b64:	89fa      	ldrh	r2, [r7, #14]
 8000b66:	f640 730f 	movw	r3, #3855	; 0xf0f
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <QSPI_DummyCyclesCfg+0xd0>)
 8000b70:	4313      	orrs	r3, r2
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	81fb      	strh	r3, [r7, #14]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b7e:	4619      	mov	r1, r3
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 fdc9 	bl	8001718 <HAL_QSPI_Command>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <QSPI_DummyCyclesCfg+0xac>
  {
    return MEMORY_ERROR;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	e00d      	b.n	8000bac <QSPI_DummyCyclesCfg+0xc8>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000b90:	f107 030e 	add.w	r3, r7, #14
 8000b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f000 fe1a 	bl	80017d4 <HAL_QSPI_Transmit>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <QSPI_DummyCyclesCfg+0xc6>
  {
    return MEMORY_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <QSPI_DummyCyclesCfg+0xc8>
  }

  return MEMORY_OK;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3748      	adds	r7, #72	; 0x48
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	ffff8080 	.word	0xffff8080

08000bb8 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hqspi: QSPI handle
  * @retval None
  */
static uint32_t QSPI_WriteEnable(QSPI_HandleTypeDef *hqspi)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b096      	sub	sp, #88	; 0x58
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000bc0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bc4:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8000bc6:	2306      	movs	r3, #6
 8000bc8:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000bde:	2300      	movs	r3, #0
 8000be0:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000be2:	2300      	movs	r3, #0
 8000be4:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000be6:	f107 0320 	add.w	r3, r7, #32
 8000bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bee:	4619      	mov	r1, r3
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fd91 	bl	8001718 <HAL_QSPI_Command>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <QSPI_WriteEnable+0x48>
  {
    return MEMORY_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e022      	b.n	8000c46 <QSPI_WriteEnable+0x8e>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8000c00:	f240 2302 	movw	r3, #514	; 0x202
 8000c04:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8000c06:	f240 2302 	movw	r3, #514	; 0x202
 8000c0a:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 8000c10:	2302      	movs	r3, #2
 8000c12:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8000c14:	2310      	movs	r3, #16
 8000c16:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c1c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8000c1e:	2305      	movs	r3, #5
 8000c20:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = QSPI_DATA_4_LINES;
 8000c22:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000c26:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c28:	f107 0208 	add.w	r2, r7, #8
 8000c2c:	f107 0120 	add.w	r1, r7, #32
 8000c30:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 fefc 	bl	8001a32 <HAL_QSPI_AutoPolling>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <QSPI_WriteEnable+0x8c>
  {
    return MEMORY_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <QSPI_WriteEnable+0x8e>
  }

  return MEMORY_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3758      	adds	r7, #88	; 0x58
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <QSPI_AutoPollingMemReady>:
  * @param  hqspi: QSPI handle
  * @param  Timeout
  * @retval None
  */
static uint32_t QSPI_AutoPollingMemReady(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b096      	sub	sp, #88	; 0x58
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000c58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8000c5e:	2305      	movs	r3, #5
 8000c60:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000c6a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000c6e:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 8000c70:	2302      	movs	r3, #2
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8000c88:	2310      	movs	r3, #16
 8000c8a:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000c8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c90:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8000c92:	f240 1301 	movw	r3, #257	; 0x101
 8000c96:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(hqspi, &s_command, &s_config, Timeout) != HAL_OK)
 8000c9c:	f107 0208 	add.w	r2, r7, #8
 8000ca0:	f107 0120 	add.w	r1, r7, #32
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 fec3 	bl	8001a32 <HAL_QSPI_AutoPolling>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <QSPI_AutoPollingMemReady+0x68>
  {
    return MEMORY_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <QSPI_AutoPollingMemReady+0x6a>
  }

  return MEMORY_OK;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3758      	adds	r7, #88	; 0x58
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <QSPI_EnterQPI>:
  * @brief  This function enter the QPSI memory in QPI mode
  * @param  hqspi QSPI handle 
  * @retval QSPI status
  */
static uint8_t QSPI_EnterQPI(QSPI_HandleTypeDef *hqspi)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b090      	sub	sp, #64	; 0x40
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8000cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ccc:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8000cce:	2335      	movs	r3, #53	; 0x35
 8000cd0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000cea:	2300      	movs	r3, #0
 8000cec:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f000 fd0d 	bl	8001718 <HAL_QSPI_Command>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <QSPI_EnterQPI+0x48>
  {
    return MEMORY_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	e000      	b.n	8000d0a <QSPI_EnterQPI+0x4a>
  }
  
  return MEMORY_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3740      	adds	r7, #64	; 0x40
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <HardFault_Handler+0x4>

08000d26 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <MemManage_Handler+0x4>

08000d2c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <BusFault_Handler+0x4>

08000d32 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <UsageFault_Handler+0x4>

08000d38 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000d66:	f000 f909 	bl	8000f7c <HAL_IncTick>
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <SystemInit+0xac>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <SystemInit+0xac>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d84:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <SystemInit+0xb0>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a25      	ldr	r2, [pc, #148]	; (8000e20 <SystemInit+0xb0>)
 8000d8a:	f043 0301 	orr.w	r3, r3, #1
 8000d8e:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <SystemInit+0xb0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d96:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <SystemInit+0xb0>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4921      	ldr	r1, [pc, #132]	; (8000e20 <SystemInit+0xb0>)
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <SystemInit+0xb4>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <SystemInit+0xb0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <SystemInit+0xb0>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	; (8000e20 <SystemInit+0xb0>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	; (8000e20 <SystemInit+0xb0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8000dba:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <SystemInit+0xb0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <SystemInit+0xb0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <SystemInit+0xb0>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <SystemInit+0xb0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <SystemInit+0xb0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <SystemInit+0xb0>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000dde:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <SystemInit+0xb0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <SystemInit+0xb0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <SystemInit+0xb0>)
 8000dea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <SystemInit+0xb0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <SystemInit+0xb8>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <SystemInit+0xbc>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e02:	d202      	bcs.n	8000e0a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <SystemInit+0xc0>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SystemInit+0xac>)
 8000e0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e10:	609a      	str	r2, [r3, #8]
#endif  


}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00
 8000e20:	58024400 	.word	0x58024400
 8000e24:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e28:	5c001000 	.word	0x5c001000
 8000e2c:	ffff0000 	.word	0xffff0000
 8000e30:	51008108 	.word	0x51008108

08000e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e3a:	e003      	b.n	8000e44 <LoopCopyDataInit>

08000e3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e42:	3104      	adds	r1, #4

08000e44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e44:	480b      	ldr	r0, [pc, #44]	; (8000e74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e4c:	d3f6      	bcc.n	8000e3c <CopyDataInit>
  ldr  r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e50:	e002      	b.n	8000e58 <LoopFillZerobss>

08000e52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e54:	f842 3b04 	str.w	r3, [r2], #4

08000e58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e5c:	d3f9      	bcc.n	8000e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e5e:	f7ff ff87 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e62:	f001 ff93 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e66:	f7ff faf3 	bl	8000450 <main>
  bx  lr    
 8000e6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e70:	08002e04 	.word	0x08002e04
  ldr  r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e78:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000e7c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000e80:	20000080 	.word	0x20000080

08000e84 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC3_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f000 f970 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e94:	f001 fe08 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8000e98:	4601      	mov	r1, r0
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_Init+0x68>)
 8000e9c:	699b      	ldr	r3, [r3, #24]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	f003 030f 	and.w	r3, r3, #15
 8000ea4:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <HAL_Init+0x6c>)
 8000ea6:	5cd3      	ldrb	r3, [r2, r3]
 8000ea8:	f003 031f 	and.w	r3, r3, #31
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_Init+0x68>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 030f 	and.w	r3, r3, #15
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_Init+0x6c>)
 8000ebc:	5cd3      	ldrb	r3, [r2, r3]
 8000ebe:	f003 031f 	and.w	r3, r3, #31
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	; (8000ef8 <HAL_Init+0x70>)
 8000eca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ecc:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <HAL_Init+0x74>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ed2:	200f      	movs	r0, #15
 8000ed4:	f000 f81c 	bl	8000f10 <HAL_InitTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e002      	b.n	8000ee8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee2:	f000 f80d 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	08002dec 	.word	0x08002dec
 8000ef8:	20000004 	.word	0x20000004
 8000efc:	20000000 	.word	0x20000000

08000f00 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f18:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_InitTick+0x60>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e021      	b.n	8000f68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <HAL_InitTick+0x64>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <HAL_InitTick+0x60>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f94d 	bl	80011da <HAL_SYSTICK_Config>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e00e      	b.n	8000f68 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d80a      	bhi.n	8000f66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f58:	f000 f917 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f5c:	4a06      	ldr	r2, [pc, #24]	; (8000f78 <HAL_InitTick+0x68>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e000      	b.n	8000f68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000000c 	.word	0x2000000c
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000008 	.word	0x20000008

08000f7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x20>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <HAL_IncTick+0x24>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	2000000c 	.word	0x2000000c
 8000fa0:	2000007c 	.word	0x2000007c

08000fa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetTick+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000007c 	.word	0x2000007c

08000fbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetREVID+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	0c1b      	lsrs	r3, r3, #16
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	5c001000 	.word	0x5c001000

08000fd4 <__NVIC_SetPriorityGrouping>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <__NVIC_SetPriorityGrouping+0x40>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	60d3      	str	r3, [r2, #12]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00
 8001018:	05fa0000 	.word	0x05fa0000

0800101c <__NVIC_GetPriorityGrouping>:
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	88fb      	ldrh	r3, [r7, #6]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff29 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001198:	f7ff ff40 	bl	800101c <__NVIC_GetPriorityGrouping>
 800119c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff90 	bl	80010c8 <NVIC_EncodePriority>
 80011a8:	4602      	mov	r2, r0
 80011aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff5f 	bl	8001074 <__NVIC_SetPriority>
}
 80011b6:	bf00      	nop
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	4603      	mov	r3, r0
 80011c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff33 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ffa4 	bl	8001130 <SysTick_Config>
 80011e8:	4603      	mov	r3, r0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001202:	4b89      	ldr	r3, [pc, #548]	; (8001428 <HAL_GPIO_Init+0x234>)
 8001204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001206:	e194      	b.n	8001532 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 8186 	beq.w	800152c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d00b      	beq.n	8001240 <HAL_GPIO_Init+0x4c>
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b02      	cmp	r3, #2
 800122e:	d007      	beq.n	8001240 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001234:	2b11      	cmp	r3, #17
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b12      	cmp	r3, #18
 800123e:	d130      	bne.n	80012a2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	2203      	movs	r2, #3
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001276:	2201      	movs	r2, #1
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	091b      	lsrs	r3, r3, #4
 800128c:	f003 0201 	and.w	r2, r3, #1
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0xee>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b12      	cmp	r3, #18
 80012e0:	d123      	bne.n	800132a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	69b9      	ldr	r1, [r7, #24]
 8001326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4013      	ands	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0203 	and.w	r2, r3, #3
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69ba      	ldr	r2, [r7, #24]
 800135c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80e0 	beq.w	800152c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <HAL_GPIO_Init+0x238>)
 800136e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001372:	4a2e      	ldr	r2, [pc, #184]	; (800142c <HAL_GPIO_Init+0x238>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <HAL_GPIO_Init+0x238>)
 800137e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138a:	4a29      	ldr	r2, [pc, #164]	; (8001430 <HAL_GPIO_Init+0x23c>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a20      	ldr	r2, [pc, #128]	; (8001434 <HAL_GPIO_Init+0x240>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d052      	beq.n	800145c <HAL_GPIO_Init+0x268>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a1f      	ldr	r2, [pc, #124]	; (8001438 <HAL_GPIO_Init+0x244>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d031      	beq.n	8001422 <HAL_GPIO_Init+0x22e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a1e      	ldr	r2, [pc, #120]	; (800143c <HAL_GPIO_Init+0x248>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d02b      	beq.n	800141e <HAL_GPIO_Init+0x22a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <HAL_GPIO_Init+0x24c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d025      	beq.n	800141a <HAL_GPIO_Init+0x226>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_GPIO_Init+0x250>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d01f      	beq.n	8001416 <HAL_GPIO_Init+0x222>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <HAL_GPIO_Init+0x254>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d019      	beq.n	8001412 <HAL_GPIO_Init+0x21e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a1a      	ldr	r2, [pc, #104]	; (800144c <HAL_GPIO_Init+0x258>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d013      	beq.n	800140e <HAL_GPIO_Init+0x21a>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a19      	ldr	r2, [pc, #100]	; (8001450 <HAL_GPIO_Init+0x25c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d00d      	beq.n	800140a <HAL_GPIO_Init+0x216>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a18      	ldr	r2, [pc, #96]	; (8001454 <HAL_GPIO_Init+0x260>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d007      	beq.n	8001406 <HAL_GPIO_Init+0x212>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_GPIO_Init+0x264>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d101      	bne.n	8001402 <HAL_GPIO_Init+0x20e>
 80013fe:	2309      	movs	r3, #9
 8001400:	e02d      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001402:	230a      	movs	r3, #10
 8001404:	e02b      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001406:	2308      	movs	r3, #8
 8001408:	e029      	b.n	800145e <HAL_GPIO_Init+0x26a>
 800140a:	2307      	movs	r3, #7
 800140c:	e027      	b.n	800145e <HAL_GPIO_Init+0x26a>
 800140e:	2306      	movs	r3, #6
 8001410:	e025      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001412:	2305      	movs	r3, #5
 8001414:	e023      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001416:	2304      	movs	r3, #4
 8001418:	e021      	b.n	800145e <HAL_GPIO_Init+0x26a>
 800141a:	2303      	movs	r3, #3
 800141c:	e01f      	b.n	800145e <HAL_GPIO_Init+0x26a>
 800141e:	2302      	movs	r3, #2
 8001420:	e01d      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001422:	2301      	movs	r3, #1
 8001424:	e01b      	b.n	800145e <HAL_GPIO_Init+0x26a>
 8001426:	bf00      	nop
 8001428:	58000080 	.word	0x58000080
 800142c:	58024400 	.word	0x58024400
 8001430:	58000400 	.word	0x58000400
 8001434:	58020000 	.word	0x58020000
 8001438:	58020400 	.word	0x58020400
 800143c:	58020800 	.word	0x58020800
 8001440:	58020c00 	.word	0x58020c00
 8001444:	58021000 	.word	0x58021000
 8001448:	58021400 	.word	0x58021400
 800144c:	58021800 	.word	0x58021800
 8001450:	58021c00 	.word	0x58021c00
 8001454:	58022000 	.word	0x58022000
 8001458:	58022400 	.word	0x58022400
 800145c:	2300      	movs	r3, #0
 800145e:	69fa      	ldr	r2, [r7, #28]
 8001460:	f002 0203 	and.w	r2, r2, #3
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	4093      	lsls	r3, r2
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	4313      	orrs	r3, r2
 800146c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800146e:	4938      	ldr	r1, [pc, #224]	; (8001550 <HAL_GPIO_Init+0x35c>)
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	089b      	lsrs	r3, r3, #2
 8001474:	3302      	adds	r3, #2
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001524:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	3301      	adds	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	2b00      	cmp	r3, #0
 800153e:	f47f ae63 	bne.w	8001208 <HAL_GPIO_Init+0x14>
  }
}
 8001542:	bf00      	nop
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	58000400 	.word	0x58000400

08001554 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_PWREx_ConfigSupply+0x70>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b04      	cmp	r3, #4
 8001566:	d00a      	beq.n	800157e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001568:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_PWREx_ConfigSupply+0x70>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	d001      	beq.n	800157a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e01f      	b.n	80015ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800157a:	2300      	movs	r3, #0
 800157c:	e01d      	b.n	80015ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_PWREx_ConfigSupply+0x70>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f023 0207 	bic.w	r2, r3, #7
 8001586:	490f      	ldr	r1, [pc, #60]	; (80015c4 <HAL_PWREx_ConfigSupply+0x70>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4313      	orrs	r3, r2
 800158c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800158e:	f7ff fd09 	bl	8000fa4 <HAL_GetTick>
 8001592:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001594:	e009      	b.n	80015aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001596:	f7ff fd05 	bl	8000fa4 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80015a4:	d901      	bls.n	80015aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e007      	b.n	80015ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_PWREx_ConfigSupply+0x70>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b6:	d1ee      	bne.n	8001596 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	58024800 	.word	0x58024800

080015c8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af02      	add	r7, sp, #8
 80015ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80015d0:	f7ff fce8 	bl	8000fa4 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d101      	bne.n	80015e0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e05f      	b.n	80016a0 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d107      	bne.n	80015fc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f87f 	bl	80016f0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80015f2:	f241 3188 	movw	r1, #5000	; 0x1388
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 faf4 	bl	8001be4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	3b01      	subs	r3, #1
 800160c:	021a      	lsls	r2, r3, #8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	2120      	movs	r1, #32
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 faec 	bl	8001c00 <QSPI_WaitFlagStateUntilTimeout>
 8001628:	4603      	mov	r3, r0
 800162a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800162c:	7afb      	ldrb	r3, [r7, #11]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d135      	bne.n	800169e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_QSPI_Init+0xe0>)
 800163a:	4013      	ands	r3, r2
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6852      	ldr	r2, [r2, #4]
 8001640:	0611      	lsls	r1, r2, #24
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68d2      	ldr	r2, [r2, #12]
 8001646:	4311      	orrs	r1, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	69d2      	ldr	r2, [r2, #28]
 800164c:	4311      	orrs	r1, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6a12      	ldr	r2, [r2, #32]
 8001652:	4311      	orrs	r1, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	430b      	orrs	r3, r1
 800165a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_QSPI_Init+0xe4>)
 8001664:	4013      	ands	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6912      	ldr	r2, [r2, #16]
 800166a:	0411      	lsls	r1, r2, #16
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6952      	ldr	r2, [r2, #20]
 8001670:	4311      	orrs	r1, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	6992      	ldr	r2, [r2, #24]
 8001676:	4311      	orrs	r1, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	430b      	orrs	r3, r1
 800167e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800169e:	7afb      	ldrb	r3, [r7, #11]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3710      	adds	r7, #16
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	00ffff2f 	.word	0x00ffff2f
 80016ac:	ffe0f8fe 	.word	0xffe0f8fe

080016b0 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e012      	b.n	80016e8 <HAL_QSPI_DeInit+0x38>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0201 	bic.w	r2, r2, #1
 80016d0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f816 	bl	8001704 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_QSPI_MspDeInit>:
  * @brief DeInitialize the QSPI MSP.
  * @param hqspi : QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef *hqspi)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspDeInit can be implemented in the user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_QSPI_Command>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af02      	add	r7, sp, #8
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001724:	f7ff fc3e 	bl	8000fa4 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b01      	cmp	r3, #1
 8001734:	d101      	bne.n	800173a <HAL_QSPI_Command+0x22>
 8001736:	2302      	movs	r3, #2
 8001738:	e048      	b.n	80017cc <HAL_QSPI_Command+0xb4>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b01      	cmp	r3, #1
 800174c:	d137      	bne.n	80017be <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2200      	movs	r2, #0
 8001752:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2200      	movs	r2, #0
 8001764:	2120      	movs	r1, #32
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 fa4a 	bl	8001c00 <QSPI_WaitFlagStateUntilTimeout>
 800176c:	4603      	mov	r3, r0
 800176e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d125      	bne.n	80017c2 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001776:	2200      	movs	r2, #0
 8001778:	68b9      	ldr	r1, [r7, #8]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 fa77 	bl	8001c6e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	2b00      	cmp	r3, #0
 8001786:	d115      	bne.n	80017b4 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2201      	movs	r2, #1
 8001790:	2102      	movs	r1, #2
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fa34 	bl	8001c00 <QSPI_WaitFlagStateUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800179c:	7dfb      	ldrb	r3, [r7, #23]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10f      	bne.n	80017c2 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2202      	movs	r2, #2
 80017a8:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80017b2:	e006      	b.n	80017c2 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80017bc:	e001      	b.n	80017c2 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80017be:	2302      	movs	r3, #2
 80017c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <HAL_QSPI_Transmit>:
  * @note   This function is used only in Indirect Write Mode
  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af02      	add	r7, sp, #8
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80017e4:	f7ff fbde 	bl	8000fa4 <HAL_GetTick>
 80017e8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	3320      	adds	r3, #32
 80017f0:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_QSPI_Transmit+0x2e>
 80017fe:	2302      	movs	r3, #2
 8001800:	e076      	b.n	80018f0 <HAL_QSPI_Transmit+0x11c>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b01      	cmp	r3, #1
 8001814:	d165      	bne.n	80018e2 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2200      	movs	r2, #0
 800181a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d056      	beq.n	80018d0 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2212      	movs	r2, #18
 8001826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	1c5a      	adds	r2, r3, #1
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695a      	ldr	r2, [r3, #20]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8001856:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8001858:	e01b      	b.n	8001892 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2201      	movs	r2, #1
 8001862:	2104      	movs	r1, #4
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 f9cb 	bl	8001c00 <QSPI_WaitFlagStateUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800186e:	7ffb      	ldrb	r3, [r7, #31]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d113      	bne.n	800189c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	1e5a      	subs	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1df      	bne.n	800185a <HAL_QSPI_Transmit+0x86>
 800189a:	e000      	b.n	800189e <HAL_QSPI_Transmit+0xca>
          break;
 800189c:	bf00      	nop
      }

      if (status == HAL_OK)
 800189e:	7ffb      	ldrb	r3, [r7, #31]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d110      	bne.n	80018c6 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2201      	movs	r2, #1
 80018ac:	2102      	movs	r1, #2
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f9a6 	bl	8001c00 <QSPI_WaitFlagStateUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80018b8:	7ffb      	ldrb	r3, [r7, #31]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d103      	bne.n	80018c6 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2202      	movs	r2, #2
 80018c4:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80018ce:	e00a      	b.n	80018e6 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f043 0208 	orr.w	r2, r3, #8
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	77fb      	strb	r3, [r7, #31]
 80018e0:	e001      	b.n	80018e6 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
 80018e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80018ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3720      	adds	r7, #32
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_QSPI_Receive>:
  * @param Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af02      	add	r7, sp, #8
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff fb4c 	bl	8000fa4 <HAL_GetTick>
 800190c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	3320      	adds	r3, #32
 800191c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d101      	bne.n	800192e <HAL_QSPI_Receive+0x36>
 800192a:	2302      	movs	r3, #2
 800192c:	e07d      	b.n	8001a2a <HAL_QSPI_Receive+0x132>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b01      	cmp	r3, #1
 8001940:	d16c      	bne.n	8001a1c <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d05d      	beq.n	8001a0a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2222      	movs	r2, #34	; 0x22
 8001952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	1c5a      	adds	r2, r3, #1
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001986:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001990:	e01c      	b.n	80019cc <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	2201      	movs	r2, #1
 800199a:	2106      	movs	r1, #6
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 f92f 	bl	8001c00 <QSPI_WaitFlagStateUntilTimeout>
 80019a2:	4603      	mov	r3, r0
 80019a4:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 80019a6:	7ffb      	ldrb	r3, [r7, #31]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d114      	bne.n	80019d6 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	7812      	ldrb	r2, [r2, #0]
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	1c5a      	adds	r2, r3, #1
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c6:	1e5a      	subs	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1de      	bne.n	8001992 <HAL_QSPI_Receive+0x9a>
 80019d4:	e000      	b.n	80019d8 <HAL_QSPI_Receive+0xe0>
          break;
 80019d6:	bf00      	nop
      }

      if (status == HAL_OK)
 80019d8:	7ffb      	ldrb	r3, [r7, #31]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d110      	bne.n	8001a00 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	2201      	movs	r2, #1
 80019e6:	2102      	movs	r1, #2
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 f909 	bl	8001c00 <QSPI_WaitFlagStateUntilTimeout>
 80019ee:	4603      	mov	r3, r0
 80019f0:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80019f2:	7ffb      	ldrb	r3, [r7, #31]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d103      	bne.n	8001a00 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2202      	movs	r2, #2
 80019fe:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a08:	e00a      	b.n	8001a20 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f043 0208 	orr.w	r2, r3, #8
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	77fb      	strb	r3, [r7, #31]
 8001a1a:	e001      	b.n	8001a20 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001a28:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_QSPI_AutoPolling>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b088      	sub	sp, #32
 8001a36:	af02      	add	r7, sp, #8
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001a40:	f7ff fab0 	bl	8000fa4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_QSPI_AutoPolling+0x24>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e060      	b.n	8001b18 <HAL_QSPI_AutoPolling+0xe6>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d14f      	bne.n	8001b0a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2242      	movs	r2, #66	; 0x42
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2120      	movs	r1, #32
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 f8bc 	bl	8001c00 <QSPI_WaitFlagStateUntilTimeout>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d13d      	bne.n	8001b0e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6852      	ldr	r2, [r2, #4]
 8001aa4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6892      	ldr	r2, [r2, #8]
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001ac8:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f8c8 	bl	8001c6e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	2108      	movs	r1, #8
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f889 	bl	8001c00 <QSPI_WaitFlagStateUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10a      	bne.n	8001b0e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2208      	movs	r2, #8
 8001afe:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b08:	e001      	b.n	8001b0e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_QSPI_MemoryMapped>:
  * @param  cfg : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001b2c:	f7ff fa3a 	bl	8000fa4 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_QSPI_MemoryMapped+0x22>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e04c      	b.n	8001bdc <HAL_QSPI_MemoryMapped+0xbc>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d13b      	bne.n	8001bce <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2282      	movs	r2, #130	; 0x82
 8001b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2120      	movs	r1, #32
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f845 	bl	8001c00 <QSPI_WaitFlagStateUntilTimeout>
 8001b76:	4603      	mov	r3, r0
 8001b78:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d128      	bne.n	8001bd2 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f023 0108 	bic.w	r1, r3, #8
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d110      	bne.n	8001bc0 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2210      	movs	r2, #16
 8001bae:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bbe:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8001bc0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 f851 	bl	8001c6e <QSPI_Config>
 8001bcc:	e001      	b.n	8001bd2 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001c10:	e01a      	b.n	8001c48 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c18:	d016      	beq.n	8001c48 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1a:	f7ff f9c3 	bl	8000fa4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10b      	bne.n	8001c48 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2204      	movs	r2, #4
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3c:	f043 0201 	orr.w	r2, r3, #1
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e00e      	b.n	8001c66 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bf14      	ite	ne
 8001c56:	2301      	movne	r3, #1
 8001c58:	2300      	moveq	r3, #0
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d1d6      	bne.n	8001c12 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d009      	beq.n	8001c96 <QSPI_Config+0x28>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001c88:	d005      	beq.n	8001c96 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3a01      	subs	r2, #1
 8001c94:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80b9 	beq.w	8001e12 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d05f      	beq.n	8001d68 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	6892      	ldr	r2, [r2, #8]
 8001cb0:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d031      	beq.n	8001d1e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc8:	431a      	orrs	r2, r3
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	049b      	lsls	r3, r3, #18
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	ea42 0103 	orr.w	r1, r2, r3
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001d0e:	f000 812e 	beq.w	8001f6e <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68ba      	ldr	r2, [r7, #8]
 8001d18:	6852      	ldr	r2, [r2, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8001d1c:	e127      	b.n	8001f6e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	431a      	orrs	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	431a      	orrs	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	049b      	lsls	r3, r3, #18
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	431a      	orrs	r2, r3
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	ea42 0103 	orr.w	r1, r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	615a      	str	r2, [r3, #20]
}
 8001d66:	e102      	b.n	8001f6e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d02e      	beq.n	8001dce <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	431a      	orrs	r2, r3
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	049b      	lsls	r3, r3, #18
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	ea42 0103 	orr.w	r1, r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001dbe:	f000 80d6 	beq.w	8001f6e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	6852      	ldr	r2, [r2, #4]
 8001dca:	619a      	str	r2, [r3, #24]
}
 8001dcc:	e0cf      	b.n	8001f6e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	431a      	orrs	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	049b      	lsls	r3, r3, #18
 8001dea:	431a      	orrs	r2, r3
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	6a1b      	ldr	r3, [r3, #32]
 8001df0:	431a      	orrs	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	431a      	orrs	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	ea42 0103 	orr.w	r1, r2, r3
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	615a      	str	r2, [r3, #20]
}
 8001e10:	e0ad      	b.n	8001f6e <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d058      	beq.n	8001ecc <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	6892      	ldr	r2, [r2, #8]
 8001e22:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d02d      	beq.n	8001e88 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	431a      	orrs	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	431a      	orrs	r2, r3
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	049b      	lsls	r3, r3, #18
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	ea42 0103 	orr.w	r1, r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001e7a:	d078      	beq.n	8001f6e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	6852      	ldr	r2, [r2, #4]
 8001e84:	619a      	str	r2, [r3, #24]
}
 8001e86:	e072      	b.n	8001f6e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	431a      	orrs	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e96:	431a      	orrs	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	049b      	lsls	r3, r3, #18
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	ea42 0103 	orr.w	r1, r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	615a      	str	r2, [r3, #20]
}
 8001eca:	e050      	b.n	8001f6e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d02a      	beq.n	8001f2a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	431a      	orrs	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	049b      	lsls	r3, r3, #18
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	431a      	orrs	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	ea42 0103 	orr.w	r1, r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001f1c:	d027      	beq.n	8001f6e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68ba      	ldr	r2, [r7, #8]
 8001f24:	6852      	ldr	r2, [r2, #4]
 8001f26:	619a      	str	r2, [r3, #24]
}
 8001f28:	e021      	b.n	8001f6e <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d01d      	beq.n	8001f6e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	431a      	orrs	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	431a      	orrs	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	049b      	lsls	r3, r3, #18
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	ea42 0103 	orr.w	r1, r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	615a      	str	r2, [r3, #20]
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	; 0x30
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e3cf      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 808b 	beq.w	80020b2 <HAL_RCC_OscConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f9c:	4b8e      	ldr	r3, [pc, #568]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fa6:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	2b10      	cmp	r3, #16
 8001fb0:	d007      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x46>
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb4:	2b18      	cmp	r3, #24
 8001fb6:	d110      	bne.n	8001fda <HAL_RCC_OscConfig+0x5e>
 8001fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fba:	f003 0303 	and.w	r3, r3, #3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d10b      	bne.n	8001fda <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc2:	4b85      	ldr	r3, [pc, #532]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d070      	beq.n	80020b0 <HAL_RCC_OscConfig+0x134>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d16c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x134>
      {
        return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e3a9      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe2:	d106      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x76>
 8001fe4:	4b7c      	ldr	r3, [pc, #496]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a7b      	ldr	r2, [pc, #492]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8001fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	e02e      	b.n	8002050 <HAL_RCC_OscConfig+0xd4>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10c      	bne.n	8002014 <HAL_RCC_OscConfig+0x98>
 8001ffa:	4b77      	ldr	r3, [pc, #476]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a76      	ldr	r2, [pc, #472]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	4b74      	ldr	r3, [pc, #464]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a73      	ldr	r2, [pc, #460]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 800200c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	e01d      	b.n	8002050 <HAL_RCC_OscConfig+0xd4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0xbc>
 800201e:	4b6e      	ldr	r3, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a6d      	ldr	r2, [pc, #436]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6a      	ldr	r2, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0xd4>
 8002038:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a66      	ldr	r2, [pc, #408]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 800203e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	4b64      	ldr	r3, [pc, #400]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a63      	ldr	r2, [pc, #396]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 800204a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800204e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d015      	beq.n	8002084 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe ffa4 	bl	8000fa4 <HAL_GetTick>
 800205c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800205e:	e00a      	b.n	8002076 <HAL_RCC_OscConfig+0xfa>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002060:	f7fe ffa0 	bl	8000fa4 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e35b      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002076:	4b58      	ldr	r3, [pc, #352]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0ee      	beq.n	8002060 <HAL_RCC_OscConfig+0xe4>
 8002082:	e016      	b.n	80020b2 <HAL_RCC_OscConfig+0x136>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe ff8e 	bl	8000fa4 <HAL_GetTick>
 8002088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x126>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800208c:	f7fe ff8a 	bl	8000fa4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x126>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e345      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020a2:	4b4d      	ldr	r3, [pc, #308]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1ee      	bne.n	800208c <HAL_RCC_OscConfig+0x110>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x136>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 8094 	beq.w	80021e8 <HAL_RCC_OscConfig+0x26c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c0:	4b45      	ldr	r3, [pc, #276]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020ca:	4b43      	ldr	r3, [pc, #268]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 80020cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ce:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_RCC_OscConfig+0x16a>
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	2b18      	cmp	r3, #24
 80020da:	d12d      	bne.n	8002138 <HAL_RCC_OscConfig+0x1bc>
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d128      	bne.n	8002138 <HAL_RCC_OscConfig+0x1bc>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e6:	4b3c      	ldr	r3, [pc, #240]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x182>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x182>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e317      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	f7fe ff5d 	bl	8000fbc <HAL_GetREVID>
 8002102:	4602      	mov	r2, r0
 8002104:	f241 0303 	movw	r3, #4099	; 0x1003
 8002108:	429a      	cmp	r2, r3
 800210a:	d80a      	bhi.n	8002122 <HAL_RCC_OscConfig+0x1a6>
 800210c:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	031b      	lsls	r3, r3, #12
 800211a:	492f      	ldr	r1, [pc, #188]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002120:	e062      	b.n	80021e8 <HAL_RCC_OscConfig+0x26c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	061b      	lsls	r3, r3, #24
 8002130:	4929      	ldr	r1, [pc, #164]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002136:	e057      	b.n	80021e8 <HAL_RCC_OscConfig+0x26c>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d038      	beq.n	80021b2 <HAL_RCC_OscConfig+0x236>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002140:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f023 0219 	bic.w	r2, r3, #25
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4922      	ldr	r1, [pc, #136]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7fe ff27 	bl	8000fa4 <HAL_GetTick>
 8002156:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800215a:	f7fe ff23 	bl	8000fa4 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e2e0      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x1de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	f7fe ff20 	bl	8000fbc <HAL_GetREVID>
 800217c:	4602      	mov	r2, r0
 800217e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002182:	429a      	cmp	r2, r3
 8002184:	d80a      	bhi.n	800219c <HAL_RCC_OscConfig+0x220>
 8002186:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	031b      	lsls	r3, r3, #12
 8002194:	4910      	ldr	r1, [pc, #64]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
 800219a:	e025      	b.n	80021e8 <HAL_RCC_OscConfig+0x26c>
 800219c:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	061b      	lsls	r3, r3, #24
 80021aa:	490b      	ldr	r1, [pc, #44]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
 80021b0:	e01a      	b.n	80021e8 <HAL_RCC_OscConfig+0x26c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <HAL_RCC_OscConfig+0x25c>)
 80021b8:	f023 0301 	bic.w	r3, r3, #1
 80021bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021be:	f7fe fef1 	bl	8000fa4 <HAL_GetTick>
 80021c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_OscConfig+0x260>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c6:	f7fe feed 	bl	8000fa4 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d903      	bls.n	80021dc <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e2aa      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
 80021d8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80021dc:	4ba0      	ldr	r3, [pc, #640]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ee      	bne.n	80021c6 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 808f 	beq.w	8002314 <HAL_RCC_OscConfig+0x398>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f6:	4b9a      	ldr	r3, [pc, #616]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002200:	4b97      	ldr	r3, [pc, #604]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b08      	cmp	r3, #8
 800220a:	d007      	beq.n	800221c <HAL_RCC_OscConfig+0x2a0>
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b18      	cmp	r3, #24
 8002210:	d12d      	bne.n	800226e <HAL_RCC_OscConfig+0x2f2>
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d128      	bne.n	800226e <HAL_RCC_OscConfig+0x2f2>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800221c:	4b90      	ldr	r3, [pc, #576]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_RCC_OscConfig+0x2b8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
 800222c:	2b80      	cmp	r3, #128	; 0x80
 800222e:	d001      	beq.n	8002234 <HAL_RCC_OscConfig+0x2b8>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e27c      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002234:	f7fe fec2 	bl	8000fbc <HAL_GetREVID>
 8002238:	4602      	mov	r2, r0
 800223a:	f241 0303 	movw	r3, #4099	; 0x1003
 800223e:	429a      	cmp	r2, r3
 8002240:	d80a      	bhi.n	8002258 <HAL_RCC_OscConfig+0x2dc>
 8002242:	4b87      	ldr	r3, [pc, #540]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	069b      	lsls	r3, r3, #26
 8002250:	4983      	ldr	r1, [pc, #524]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002256:	e05d      	b.n	8002314 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002258:	4b81      	ldr	r3, [pc, #516]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	061b      	lsls	r3, r3, #24
 8002266:	497e      	ldr	r1, [pc, #504]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800226c:	e052      	b.n	8002314 <HAL_RCC_OscConfig+0x398>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d035      	beq.n	80022e2 <HAL_RCC_OscConfig+0x366>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002276:	4b7a      	ldr	r3, [pc, #488]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a79      	ldr	r2, [pc, #484]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 800227c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002282:	f7fe fe8f 	bl	8000fa4 <HAL_GetTick>
 8002286:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002288:	e008      	b.n	800229c <HAL_RCC_OscConfig+0x320>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800228a:	f7fe fe8b 	bl	8000fa4 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b02      	cmp	r3, #2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e248      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800229c:	4b70      	ldr	r3, [pc, #448]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0f0      	beq.n	800228a <HAL_RCC_OscConfig+0x30e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022a8:	f7fe fe88 	bl	8000fbc <HAL_GetREVID>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f241 0303 	movw	r3, #4099	; 0x1003
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d80a      	bhi.n	80022cc <HAL_RCC_OscConfig+0x350>
 80022b6:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	069b      	lsls	r3, r3, #26
 80022c4:	4966      	ldr	r1, [pc, #408]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	604b      	str	r3, [r1, #4]
 80022ca:	e023      	b.n	8002314 <HAL_RCC_OscConfig+0x398>
 80022cc:	4b64      	ldr	r3, [pc, #400]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	4961      	ldr	r1, [pc, #388]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	60cb      	str	r3, [r1, #12]
 80022e0:	e018      	b.n	8002314 <HAL_RCC_OscConfig+0x398>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80022e2:	4b5f      	ldr	r3, [pc, #380]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5e      	ldr	r2, [pc, #376]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80022e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe fe59 	bl	8000fa4 <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x38c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80022f6:	f7fe fe55 	bl	8000fa4 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x38c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e212      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002308:	4b55      	ldr	r3, [pc, #340]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x37a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d036      	beq.n	800238e <HAL_RCC_OscConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d019      	beq.n	800235c <HAL_RCC_OscConfig+0x3e0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002328:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 800232a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800232c:	4a4c      	ldr	r2, [pc, #304]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe fe36 	bl	8000fa4 <HAL_GetTick>
 8002338:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x3d2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800233c:	f7fe fe32 	bl	8000fa4 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1ef      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 8002350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x3c0>
 800235a:	e018      	b.n	800238e <HAL_RCC_OscConfig+0x412>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235c:	4b40      	ldr	r3, [pc, #256]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 800235e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002360:	4a3f      	ldr	r2, [pc, #252]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002368:	f7fe fe1c 	bl	8000fa4 <HAL_GetTick>
 800236c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x406>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002370:	f7fe fe18 	bl	8000fa4 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x406>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1d5      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002382:	4b37      	ldr	r3, [pc, #220]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 8002384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x3f4>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	d036      	beq.n	8002408 <HAL_RCC_OscConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d019      	beq.n	80023d6 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023a2:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a2e      	ldr	r2, [pc, #184]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80023a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023ac:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023ae:	f7fe fdf9 	bl	8000fa4 <HAL_GetTick>
 80023b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x44c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023b6:	f7fe fdf5 	bl	8000fa4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x44c>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e1b2      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80023c8:	4b25      	ldr	r3, [pc, #148]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x43a>
 80023d4:	e018      	b.n	8002408 <HAL_RCC_OscConfig+0x48c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023d6:	4b22      	ldr	r3, [pc, #136]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a21      	ldr	r2, [pc, #132]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80023dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80023e2:	f7fe fddf 	bl	8000fa4 <HAL_GetTick>
 80023e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x480>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80023ea:	f7fe fddb 	bl	8000fa4 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x480>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e198      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023fc:	4b18      	ldr	r3, [pc, #96]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f0      	bne.n	80023ea <HAL_RCC_OscConfig+0x46e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8086 	beq.w	8002522 <HAL_RCC_OscConfig+0x5a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <HAL_RCC_OscConfig+0x4e8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_RCC_OscConfig+0x4e8>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002420:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002422:	f7fe fdbf 	bl	8000fa4 <HAL_GetTick>
 8002426:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x4c0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800242a:	f7fe fdbb 	bl	8000fa4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b64      	cmp	r3, #100	; 0x64
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x4c0>
      {
        return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e178      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800243c:	4b09      	ldr	r3, [pc, #36]	; (8002464 <HAL_RCC_OscConfig+0x4e8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x4ae>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d10b      	bne.n	8002468 <HAL_RCC_OscConfig+0x4ec>
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 8002452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002454:	4a02      	ldr	r2, [pc, #8]	; (8002460 <HAL_RCC_OscConfig+0x4e4>)
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	6713      	str	r3, [r2, #112]	; 0x70
 800245c:	e032      	b.n	80024c4 <HAL_RCC_OscConfig+0x548>
 800245e:	bf00      	nop
 8002460:	58024400 	.word	0x58024400
 8002464:	58024800 	.word	0x58024800
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10c      	bne.n	800248a <HAL_RCC_OscConfig+0x50e>
 8002470:	4b8c      	ldr	r3, [pc, #560]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002474:	4a8b      	ldr	r2, [pc, #556]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	6713      	str	r3, [r2, #112]	; 0x70
 800247c:	4b89      	ldr	r3, [pc, #548]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	4a88      	ldr	r2, [pc, #544]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002482:	f023 0304 	bic.w	r3, r3, #4
 8002486:	6713      	str	r3, [r2, #112]	; 0x70
 8002488:	e01c      	b.n	80024c4 <HAL_RCC_OscConfig+0x548>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b05      	cmp	r3, #5
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x530>
 8002492:	4b84      	ldr	r3, [pc, #528]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a83      	ldr	r2, [pc, #524]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002498:	f043 0304 	orr.w	r3, r3, #4
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	4b81      	ldr	r3, [pc, #516]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a80      	ldr	r2, [pc, #512]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0x548>
 80024ac:	4b7d      	ldr	r3, [pc, #500]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80024ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b0:	4a7c      	ldr	r2, [pc, #496]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	6713      	str	r3, [r2, #112]	; 0x70
 80024b8:	4b7a      	ldr	r3, [pc, #488]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80024ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024bc:	4a79      	ldr	r2, [pc, #484]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80024be:	f023 0304 	bic.w	r3, r3, #4
 80024c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d015      	beq.n	80024f8 <HAL_RCC_OscConfig+0x57c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7fe fd6a 	bl	8000fa4 <HAL_GetTick>
 80024d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024d2:	e00a      	b.n	80024ea <HAL_RCC_OscConfig+0x56e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024d4:	f7fe fd66 	bl	8000fa4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x56e>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e121      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024ea:	4b6e      	ldr	r3, [pc, #440]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0ee      	beq.n	80024d4 <HAL_RCC_OscConfig+0x558>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x5a6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe fd54 	bl	8000fa4 <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x59a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe fd50 	bl	8000fa4 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x59a>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e10b      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002516:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ee      	bne.n	8002500 <HAL_RCC_OscConfig+0x584>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8100 	beq.w	800272c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800252c:	4b5d      	ldr	r3, [pc, #372]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002534:	2b18      	cmp	r3, #24
 8002536:	f000 80bb 	beq.w	80026b0 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b02      	cmp	r3, #2
 8002540:	f040 8095 	bne.w	800266e <HAL_RCC_OscConfig+0x6f2>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	4b57      	ldr	r3, [pc, #348]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a56      	ldr	r2, [pc, #344]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 800254a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800254e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fd28 	bl	8000fa4 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x5ee>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fd24 	bl	8000fa4 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0e1      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800256a:	4b4e      	ldr	r3, [pc, #312]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x5dc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002576:	4b4b      	ldr	r3, [pc, #300]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800257a:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <HAL_RCC_OscConfig+0x72c>)
 800257c:	4013      	ands	r3, r2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	430a      	orrs	r2, r1
 800258a:	4946      	ldr	r1, [pc, #280]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 800258c:	4313      	orrs	r3, r2
 800258e:	628b      	str	r3, [r1, #40]	; 0x28
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	3b01      	subs	r3, #1
 8002596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	3b01      	subs	r3, #1
 80025a0:	025b      	lsls	r3, r3, #9
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025aa:	3b01      	subs	r3, #1
 80025ac:	041b      	lsls	r3, r3, #16
 80025ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b8:	3b01      	subs	r3, #1
 80025ba:	061b      	lsls	r3, r3, #24
 80025bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80025c0:	4938      	ldr	r1, [pc, #224]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80025c6:	4b37      	ldr	r3, [pc, #220]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	4a36      	ldr	r2, [pc, #216]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025d2:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80025d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d6:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_RCC_OscConfig+0x730>)
 80025d8:	4013      	ands	r3, r2
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025de:	00d2      	lsls	r2, r2, #3
 80025e0:	4930      	ldr	r1, [pc, #192]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80025e6:	4b2f      	ldr	r3, [pc, #188]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f023 020c 	bic.w	r2, r3, #12
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	492c      	ldr	r1, [pc, #176]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80025f8:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 80025fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fc:	f023 0202 	bic.w	r2, r3, #2
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	4927      	ldr	r1, [pc, #156]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002606:	4313      	orrs	r3, r2
 8002608:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800260a:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	4a25      	ldr	r2, [pc, #148]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002614:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002616:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261a:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 800261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002620:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002622:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002628:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800262c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800262e:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002632:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800263a:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a19      	ldr	r2, [pc, #100]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002640:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe fcad 	bl	8000fa4 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x6e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fca9 	bl	8000fa4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x6e4>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e066      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002660:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x6d2>
 800266c:	e05e      	b.n	800272c <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a0c      	ldr	r2, [pc, #48]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002674:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002678:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe fc93 	bl	8000fa4 <HAL_GetTick>
 800267e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x718>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002682:	f7fe fc8f 	bl	8000fa4 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x718>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e04c      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002694:	4b03      	ldr	r3, [pc, #12]	; (80026a4 <HAL_RCC_OscConfig+0x728>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d1f0      	bne.n	8002682 <HAL_RCC_OscConfig+0x706>
 80026a0:	e044      	b.n	800272c <HAL_RCC_OscConfig+0x7b0>
 80026a2:	bf00      	nop
 80026a4:	58024400 	.word	0x58024400
 80026a8:	fffffc0c 	.word	0xfffffc0c
 80026ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_RCC_OscConfig+0x7bc>)
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <HAL_RCC_OscConfig+0x7bc>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d031      	beq.n	8002728 <HAL_RCC_OscConfig+0x7ac>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f003 0203 	and.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d12a      	bne.n	8002728 <HAL_RCC_OscConfig+0x7ac>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d122      	bne.n	8002728 <HAL_RCC_OscConfig+0x7ac>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d11a      	bne.n	8002728 <HAL_RCC_OscConfig+0x7ac>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	0a5b      	lsrs	r3, r3, #9
 80026f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002700:	429a      	cmp	r2, r3
 8002702:	d111      	bne.n	8002728 <HAL_RCC_OscConfig+0x7ac>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	0c1b      	lsrs	r3, r3, #16
 8002708:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002710:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002712:	429a      	cmp	r2, r3
 8002714:	d108      	bne.n	8002728 <HAL_RCC_OscConfig+0x7ac>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	0e1b      	lsrs	r3, r3, #24
 800271a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_OscConfig+0x7b0>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x7b2>
      }
    }
  }
  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3730      	adds	r7, #48	; 0x30
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	58024400 	.word	0x58024400

0800273c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e19c      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4b8a      	ldr	r3, [pc, #552]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 030f 	and.w	r3, r3, #15
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d910      	bls.n	8002780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b87      	ldr	r3, [pc, #540]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 020f 	bic.w	r2, r3, #15
 8002766:	4985      	ldr	r1, [pc, #532]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b83      	ldr	r3, [pc, #524]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e184      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	4b7b      	ldr	r3, [pc, #492]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002798:	429a      	cmp	r2, r3
 800279a:	d908      	bls.n	80027ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800279c:	4b78      	ldr	r3, [pc, #480]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	4975      	ldr	r1, [pc, #468]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0308 	and.w	r3, r3, #8
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	4b70      	ldr	r3, [pc, #448]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d908      	bls.n	80027dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027ca:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	496a      	ldr	r1, [pc, #424]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0310 	and.w	r3, r3, #16
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699a      	ldr	r2, [r3, #24]
 80027ec:	4b64      	ldr	r3, [pc, #400]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d908      	bls.n	800280a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	495e      	ldr	r1, [pc, #376]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002806:	4313      	orrs	r3, r2
 8002808:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0320 	and.w	r3, r3, #32
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	4b59      	ldr	r3, [pc, #356]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002822:	429a      	cmp	r2, r3
 8002824:	d908      	bls.n	8002838 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002826:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4953      	ldr	r1, [pc, #332]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002834:	4313      	orrs	r3, r2
 8002836:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	429a      	cmp	r2, r3
 8002852:	d908      	bls.n	8002866 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b4a      	ldr	r3, [pc, #296]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	f023 020f 	bic.w	r2, r3, #15
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4947      	ldr	r1, [pc, #284]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002862:	4313      	orrs	r3, r2
 8002864:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d055      	beq.n	800291e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4940      	ldr	r1, [pc, #256]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002880:	4313      	orrs	r3, r2
 8002882:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d107      	bne.n	800289c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800288c:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d121      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0f6      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028a4:	4b36      	ldr	r3, [pc, #216]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d115      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0ea      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028bc:	4b30      	ldr	r3, [pc, #192]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d109      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0de      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028cc:	4b2c      	ldr	r3, [pc, #176]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0d6      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	f023 0207 	bic.w	r2, r3, #7
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4925      	ldr	r1, [pc, #148]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ee:	f7fe fb59 	bl	8000fa4 <HAL_GetTick>
 80028f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f4:	e00a      	b.n	800290c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f6:	f7fe fb55 	bl	8000fa4 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f241 3288 	movw	r2, #5000	; 0x1388
 8002904:	4293      	cmp	r3, r2
 8002906:	d901      	bls.n	800290c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e0be      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290c:	4b1c      	ldr	r3, [pc, #112]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	429a      	cmp	r2, r3
 800291c:	d1eb      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	4b14      	ldr	r3, [pc, #80]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	429a      	cmp	r2, r3
 8002938:	d208      	bcs.n	800294c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293a:	4b11      	ldr	r3, [pc, #68]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f023 020f 	bic.w	r2, r3, #15
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	490e      	ldr	r1, [pc, #56]	; (8002980 <HAL_RCC_ClockConfig+0x244>)
 8002948:	4313      	orrs	r3, r2
 800294a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d214      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b08      	ldr	r3, [pc, #32]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 020f 	bic.w	r2, r3, #15
 8002962:	4906      	ldr	r1, [pc, #24]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b04      	ldr	r3, [pc, #16]	; (800297c <HAL_RCC_ClockConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d005      	beq.n	8002984 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e086      	b.n	8002a8a <HAL_RCC_ClockConfig+0x34e>
 800297c:	52002000 	.word	0x52002000
 8002980:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d010      	beq.n	80029b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800299c:	429a      	cmp	r2, r3
 800299e:	d208      	bcs.n	80029b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029a0:	4b3c      	ldr	r3, [pc, #240]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	4939      	ldr	r1, [pc, #228]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0308 	and.w	r3, r3, #8
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d010      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d208      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	492e      	ldr	r1, [pc, #184]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d208      	bcs.n	8002a0e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	4922      	ldr	r1, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0320 	and.w	r3, r3, #32
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d010      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d208      	bcs.n	8002a3c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	4917      	ldr	r1, [pc, #92]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a3c:	f000 f834 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a40:	4601      	mov	r1, r0
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	4a12      	ldr	r2, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x35c>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	fa21 f303 	lsr.w	r3, r1, r3
 8002a58:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <HAL_RCC_ClockConfig+0x358>)
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_RCC_ClockConfig+0x35c>)
 8002a64:	5cd3      	ldrb	r3, [r2, r3]
 8002a66:	f003 031f 	and.w	r3, r3, #31
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a70:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x360>)
 8002a72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a74:	4a0a      	ldr	r2, [pc, #40]	; (8002aa0 <HAL_RCC_ClockConfig+0x364>)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002a7a:	4b0a      	ldr	r3, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x368>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fe fa46 	bl	8000f10 <HAL_InitTick>
 8002a84:	4603      	mov	r3, r0
 8002a86:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	58024400 	.word	0x58024400
 8002a98:	08002dec 	.word	0x08002dec
 8002a9c:	20000004 	.word	0x20000004
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	20000008 	.word	0x20000008

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aae:	4baf      	ldr	r3, [pc, #700]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ab6:	2b18      	cmp	r3, #24
 8002ab8:	f200 814e 	bhi.w	8002d58 <HAL_RCC_GetSysClockFreq+0x2b0>
 8002abc:	a201      	add	r2, pc, #4	; (adr r2, 8002ac4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002b29 	.word	0x08002b29
 8002ac8:	08002d59 	.word	0x08002d59
 8002acc:	08002d59 	.word	0x08002d59
 8002ad0:	08002d59 	.word	0x08002d59
 8002ad4:	08002d59 	.word	0x08002d59
 8002ad8:	08002d59 	.word	0x08002d59
 8002adc:	08002d59 	.word	0x08002d59
 8002ae0:	08002d59 	.word	0x08002d59
 8002ae4:	08002b4f 	.word	0x08002b4f
 8002ae8:	08002d59 	.word	0x08002d59
 8002aec:	08002d59 	.word	0x08002d59
 8002af0:	08002d59 	.word	0x08002d59
 8002af4:	08002d59 	.word	0x08002d59
 8002af8:	08002d59 	.word	0x08002d59
 8002afc:	08002d59 	.word	0x08002d59
 8002b00:	08002d59 	.word	0x08002d59
 8002b04:	08002b55 	.word	0x08002b55
 8002b08:	08002d59 	.word	0x08002d59
 8002b0c:	08002d59 	.word	0x08002d59
 8002b10:	08002d59 	.word	0x08002d59
 8002b14:	08002d59 	.word	0x08002d59
 8002b18:	08002d59 	.word	0x08002d59
 8002b1c:	08002d59 	.word	0x08002d59
 8002b20:	08002d59 	.word	0x08002d59
 8002b24:	08002b5b 	.word	0x08002b5b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b28:	4b90      	ldr	r3, [pc, #576]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b34:	4b8d      	ldr	r3, [pc, #564]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	08db      	lsrs	r3, r3, #3
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	4a8c      	ldr	r2, [pc, #560]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
 8002b44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002b46:	e10a      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002b48:	4b89      	ldr	r3, [pc, #548]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002b4a:	61bb      	str	r3, [r7, #24]
    break;
 8002b4c:	e107      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002b4e:	4b89      	ldr	r3, [pc, #548]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002b50:	61bb      	str	r3, [r7, #24]
    break;
 8002b52:	e104      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002b54:	4b88      	ldr	r3, [pc, #544]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002b56:	61bb      	str	r3, [r7, #24]
    break;
 8002b58:	e101      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b5a:	4b84      	ldr	r3, [pc, #528]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b64:	4b81      	ldr	r3, [pc, #516]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b70:	4b7e      	ldr	r3, [pc, #504]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b7a:	4b7c      	ldr	r3, [pc, #496]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7e:	08db      	lsrs	r3, r3, #3
 8002b80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	fb02 f303 	mul.w	r3, r2, r3
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b92:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80da 	beq.w	8002d52 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d05a      	beq.n	8002c5a <HAL_RCC_GetSysClockFreq+0x1b2>
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d302      	bcc.n	8002bae <HAL_RCC_GetSysClockFreq+0x106>
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d078      	beq.n	8002c9e <HAL_RCC_GetSysClockFreq+0x1f6>
 8002bac:	e099      	b.n	8002ce2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bae:	4b6f      	ldr	r3, [pc, #444]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d02d      	beq.n	8002c16 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bba:	4b6c      	ldr	r3, [pc, #432]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	08db      	lsrs	r3, r3, #3
 8002bc0:	f003 0303 	and.w	r3, r3, #3
 8002bc4:	4a6a      	ldr	r2, [pc, #424]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bca:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002be4:	4b61      	ldr	r3, [pc, #388]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bec:	ee07 3a90 	vmov	s15, r3
 8002bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bf8:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002bfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c10:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002c14:	e087      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	ee07 3a90 	vmov	s15, r3
 8002c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c20:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002d80 <HAL_RCC_GetSysClockFreq+0x2d8>
 8002c24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c28:	4b50      	ldr	r3, [pc, #320]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c30:	ee07 3a90 	vmov	s15, r3
 8002c34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c38:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c3c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c58:	e065      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	ee07 3a90 	vmov	s15, r3
 8002c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c64:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002d84 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002c68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c6c:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c80:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002c84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c9c:	e043      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	ee07 3a90 	vmov	s15, r3
 8002ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca8:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002d88 <HAL_RCC_GetSysClockFreq+0x2e0>
 8002cac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cc4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002cc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ccc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ce0:	e021      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	ee07 3a90 	vmov	s15, r3
 8002ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cec:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002d84 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002cf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cf4:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfc:	ee07 3a90 	vmov	s15, r3
 8002d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d04:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d08:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002d7c <HAL_RCC_GetSysClockFreq+0x2d4>
 8002d0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d24:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	0a5b      	lsrs	r3, r3, #9
 8002d2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d30:	3301      	adds	r3, #1
 8002d32:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d4a:	ee17 3a90 	vmov	r3, s15
 8002d4e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002d50:	e005      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
    break;
 8002d56:	e002      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002d58:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002d5a:	61bb      	str	r3, [r7, #24]
    break;
 8002d5c:	bf00      	nop
  }

  return sysclockfreq;
 8002d5e:	69bb      	ldr	r3, [r7, #24]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3724      	adds	r7, #36	; 0x24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	03d09000 	.word	0x03d09000
 8002d74:	003d0900 	.word	0x003d0900
 8002d78:	017d7840 	.word	0x017d7840
 8002d7c:	46000000 	.word	0x46000000
 8002d80:	4c742400 	.word	0x4c742400
 8002d84:	4a742400 	.word	0x4a742400
 8002d88:	4bbebc20 	.word	0x4bbebc20

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	4e0d      	ldr	r6, [pc, #52]	; (8002dc4 <__libc_init_array+0x38>)
 8002d90:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <__libc_init_array+0x3c>)
 8002d92:	1ba4      	subs	r4, r4, r6
 8002d94:	10a4      	asrs	r4, r4, #2
 8002d96:	2500      	movs	r5, #0
 8002d98:	42a5      	cmp	r5, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	4e0b      	ldr	r6, [pc, #44]	; (8002dcc <__libc_init_array+0x40>)
 8002d9e:	4c0c      	ldr	r4, [pc, #48]	; (8002dd0 <__libc_init_array+0x44>)
 8002da0:	f000 f818 	bl	8002dd4 <_init>
 8002da4:	1ba4      	subs	r4, r4, r6
 8002da6:	10a4      	asrs	r4, r4, #2
 8002da8:	2500      	movs	r5, #0
 8002daa:	42a5      	cmp	r5, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002db4:	4798      	blx	r3
 8002db6:	3501      	adds	r5, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dbe:	4798      	blx	r3
 8002dc0:	3501      	adds	r5, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	08002dfc 	.word	0x08002dfc
 8002dc8:	08002dfc 	.word	0x08002dfc
 8002dcc:	08002dfc 	.word	0x08002dfc
 8002dd0:	08002e00 	.word	0x08002e00

08002dd4 <_init>:
 8002dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd6:	bf00      	nop
 8002dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dda:	bc08      	pop	{r3}
 8002ddc:	469e      	mov	lr, r3
 8002dde:	4770      	bx	lr

08002de0 <_fini>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	bf00      	nop
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr
